import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef void LocaleChangeCallback(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale _newLocale) {
    _shouldReload = true;
    I18n._locale = _newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate =
    const GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Ving"
  String get appName => "Ving";
  /// "Nothing Found"
  String get viewStateMessageEmpty => "Nothing Found";
  /// "Not sign in yet"
  String get viewStateMessageUnAuth => "Not sign in yet";
  /// "Refresh"
  String get viewStateButtonRefresh => "Refresh";
  /// "Pull down to refresh"
  String get refreshIdle => "Pull down to refresh";
  /// "Refresh when release"
  String get refreshRefreshWhenRelease => "Refresh when release";
  /// "Refreshing..."
  String get refreshing => "Refreshing...";
  /// "Refresh Complete"
  String get refreshComplete => "Refresh Complete";
  /// "release to enter second floor"
  String get refreshTwoLevel => "release to enter second floor";
  /// "Loading..."
  String get loadMoreLoading => "Loading...";
  /// "No more data"
  String get loadMoreNoData => "No more data";
  /// "Load More.."
  String get loadMoreIdle => "Load More..";
  /// "Load Failed,Click Retry!"
  String get loadMoreFailed => "Load Failed,Click Retry!";
  /// "Cancel"
  String get cancel => "Cancel";
  /// "Confirm"
  String get confirm => "Confirm";
  /// "Retry"
  String get retry => "Retry";
  /// "Skip"
  String get splashSkip => "Skip";
  /// "Home"
  String get tabHome => "Home";
  /// "Discover"
  String get tabDiscover => "Discover";
  /// "Message"
  String get tabMsg => "Message";
  /// "Me"
  String get tabUser => "Me";
  /// "Setting"
  String get setting => "Setting";
  /// "Language"
  String get settingLanguage => "Language";
  /// "System Font"
  String get settingFont => "System Font";
  /// "Sign Out"
  String get logout => "Sign Out";
  /// "Favorites"
  String get favourites => "Favorites";
  /// "Dark Mode"
  String get darkMode => "Dark Mode";
  /// "Theme"
  String get theme => "Theme";
  /// "About"
  String get about => "About";
  /// "Close"
  String get close => "Close";
  /// "FeedBack"
  String get feedback => "FeedBack";
  /// "Can't find mail app,please github issues"
  String get githubIssue => "Can't find mail app,please github issues";
  /// "Auto"
  String get autoBySystem => "Auto";
  /// "ZCOOL KuaiLe"
  String get fontKuaiLe => "ZCOOL KuaiLe";
  /// "not empty"
  String get fieldNotNull => "not empty";
  /// "Username"
  String get userName => "Username";
  /// "Password"
  String get password => "Password";
  /// "Sign Up"
  String get toSignUp => "Sign Up";
  /// "Sign Up"
  String get signUp => "Sign Up";
  /// "Confirm Password"
  String get rePassword => "Confirm Password";
  /// "The two passwords differ"
  String get twoPwdDifferent => "The two passwords differ";
  /// "Sign In"
  String get toSignIn => "Sign In";
  /// "Sign In"
  String get signIn => "Sign In";
  /// "No Account ? "
  String get noAccount => "No Account ? ";
  /// "My favourites"
  String get myFavourites => "My favourites";
  /// "More"
  String get signIn3thd => "More";
  /// "Retry"
  String get pageStateRetry => "Retry";
  /// "Load Failed"
  String get pageStateError => "Load Failed";
  /// "Hot"
  String get searchHot => "Hot";
  /// "Shake"
  String get searchShake => "Shake";
  /// "History"
  String get searchHistory => "History";
  /// "Clear"
  String get clear => "Clear";
  /// "Refresh"
  String get refresh => "Refresh";
  /// "UnLike"
  String get unLike => "UnLike";
  /// "Like"
  String get Like => "Like";
  /// "Share"
  String get share => "Share";
  /// "Cinema"
  String get cinema => "Cinema";
  /// "Rate"
  String get rate => "Rate";
  /// "a Oh.."
  String get needLoginTitle => "a Oh..";
  /// "Go to Sign In"
  String get needLogin => "Go to Sign In";
  /// "Load failed,retry later"
  String get loadFailed => "Load failed,retry later";
  /// "Remove"
  String get collectionRemove => "Remove";
  /// "Top"
  String get article_tag_top => "Top";
  /// "Open Browser"
  String get openBrowser => "Open Browser";
  /// "Coin"
  String get coin => "Coin";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_zh_CN extends I18n {
  const _I18n_zh_CN();

  /// "Ving"
  @override
  String get appName => "Ving";
  /// "空空如也"
  @override
  String get viewStateMessageEmpty => "空空如也";
  /// "未登录"
  @override
  String get viewStateMessageUnAuth => "未登录";
  /// "刷新一下"
  @override
  String get viewStateButtonRefresh => "刷新一下";
  /// "下拉可刷新"
  @override
  String get refreshIdle => "下拉可刷新";
  /// "释放可刷新"
  @override
  String get refreshRefreshWhenRelease => "释放可刷新";
  /// "刷新中"
  @override
  String get refreshing => "刷新中";
  /// "刷新完成"
  @override
  String get refreshComplete => "刷新完成";
  /// "欢迎光临,我的空中楼阁"
  @override
  String get refreshTwoLevel => "欢迎光临,我的空中楼阁";
  /// "加载中..."
  @override
  String get loadMoreLoading => "加载中...";
  /// "没有更多数据了"
  @override
  String get loadMoreNoData => "没有更多数据了";
  /// "上拉加载更多"
  @override
  String get loadMoreIdle => "上拉加载更多";
  /// "加载失败,请点击重试"
  @override
  String get loadMoreFailed => "加载失败,请点击重试";
  /// "取消"
  @override
  String get cancel => "取消";
  /// "确认"
  @override
  String get confirm => "确认";
  /// "重试"
  @override
  String get retry => "重试";
  /// "跳过"
  @override
  String get splashSkip => "跳过";
  /// "首页"
  @override
  String get tabHome => "首页";
  /// "发现"
  @override
  String get tabDiscover => "发现";
  /// "消息"
  @override
  String get tabMsg => "消息";
  /// "我的"
  @override
  String get tabUser => "我的";
  /// "设置"
  @override
  String get setting => "设置";
  /// "多语言"
  @override
  String get settingLanguage => "多语言";
  /// "字体"
  @override
  String get settingFont => "字体";
  /// "退出登录"
  @override
  String get logout => "退出登录";
  /// "收藏"
  @override
  String get favourites => "收藏";
  /// "黑夜模式"
  @override
  String get darkMode => "黑夜模式";
  /// "色彩主题"
  @override
  String get theme => "色彩主题";
  /// "关于"
  @override
  String get about => "关于";
  /// "关闭"
  @override
  String get close => "关闭";
  /// "意见反馈"
  @override
  String get feedback => "意见反馈";
  /// "未找到邮件客户端,请前往github,提issue"
  @override
  String get githubIssue => "未找到邮件客户端,请前往github,提issue";
  /// "跟随系统"
  @override
  String get autoBySystem => "跟随系统";
  /// "快乐字体"
  @override
  String get fontKuaiLe => "快乐字体";
  /// "不能为空"
  @override
  String get fieldNotNull => "不能为空";
  /// "用户名"
  @override
  String get userName => "用户名";
  /// "密码"
  @override
  String get password => "密码";
  /// "去注册"
  @override
  String get toSignUp => "去注册";
  /// "注册"
  @override
  String get signUp => "注册";
  /// "确认密码"
  @override
  String get rePassword => "确认密码";
  /// "两次密码不一致"
  @override
  String get twoPwdDifferent => "两次密码不一致";
  /// "点我登录"
  @override
  String get toSignIn => "点我登录";
  /// "登录"
  @override
  String get signIn => "登录";
  /// "还没账号? "
  @override
  String get noAccount => "还没账号? ";
  /// "我的收藏"
  @override
  String get myFavourites => "我的收藏";
  /// "第三方登录"
  @override
  String get signIn3thd => "第三方登录";
  /// "重试"
  @override
  String get pageStateRetry => "重试";
  /// "加载失败"
  @override
  String get pageStateError => "加载失败";
  /// "热门搜索"
  @override
  String get searchHot => "热门搜索";
  /// "换一换"
  @override
  String get searchShake => "换一换";
  /// "历史搜索"
  @override
  String get searchHistory => "历史搜索";
  /// "清空"
  @override
  String get clear => "清空";
  /// "刷新"
  @override
  String get refresh => "刷新";
  /// "取消收藏"
  @override
  String get unLike => "取消收藏";
  /// "收藏"
  @override
  String get Like => "收藏";
  /// "分享"
  @override
  String get share => "分享";
  /// "放映厅"
  @override
  String get cinema => "放映厅";
  /// "评分"
  @override
  String get rate => "评分";
  /// "未登录"
  @override
  String get needLoginTitle => "未登录";
  /// "还没有登录,请先登录.."
  @override
  String get needLogin => "还没有登录,请先登录..";
  /// "加载失败,请稍后重试"
  @override
  String get loadFailed => "加载失败,请稍后重试";
  /// "移除收藏"
  @override
  String get collectionRemove => "移除收藏";
  /// "置顶"
  @override
  String get article_tag_top => "置顶";
  /// "浏览器打开"
  @override
  String get openBrowser => "浏览器打开";
  /// "积分"
  @override
  String get coin => "积分";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      const Locale("en", "US"),
      const Locale("zh", "CN")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (this.isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale _locale) {
    I18n._locale ??= _locale;
    I18n._shouldReload = false;
    final Locale locale = I18n._locale;
    final String lang = locale != null ? locale.toString() : "";
    final String languageCode = locale != null ? locale.languageCode : "";
    if ("en_US" == lang) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh_CN" == lang) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("en" == languageCode) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh" == languageCode) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }

    return new SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}